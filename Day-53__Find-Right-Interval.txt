class Solution {
    int binary_search(vector<pair<pair<int,int>,int>>& sorted, int target) {
        int n=sorted.size();
        if(sorted[n-1].first.first < target) {
            return -1;
        }

        int start=0;
        int end=n-1;
        while(start<=end) {
            int mid = start+(end-start)/2;
            if(sorted[mid].first.first>=target) {
                end=mid-1;
            } else {
                start=mid+1;
            }
        }

        return sorted[start].second;
    }
public:
    vector<int> findRightInterval(vector<vector<int>>& intervals) {
        vector<pair<pair<int,int>,int>> sorted;
        int n = intervals.size();

        for(int i=0; i<n; i++) {
            sorted.push_back({{intervals[i][0],intervals[i][1]},i});
        }

        sort(sorted.begin(),sorted.end());
        vector<int> res(n,-1);

        for(int i=0; i<n; i++) {
            res[i] = binary_search(sorted,intervals[i][1]);
        }

        return res;
    }

};